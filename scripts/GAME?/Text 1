<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Snake — Single File Game</title>
  <style>
    :root{font-family:system-ui,Segoe UI,Roboto,Arial;margin:0;padding:0}
    body{display:flex;align-items:center;justify-content:center;height:100vh;background:linear-gradient(135deg,#0f172a,#031124);color:#e6eef8}
    .game-wrap{display:grid;grid-template-rows:auto 1fr;gap:12px;align-items:center}
    h1{margin:0;font-size:18px;text-align:center}
    .info{display:flex;gap:12px;justify-content:center;align-items:center}
    .btn{background:#2563eb;border:0;padding:8px 12px;border-radius:8px;color:white;cursor:pointer}
    canvas{background:#071027;border-radius:8px;box-shadow:0 6px 24px rgba(0,0,0,.6)}
    .meta{font-size:13px;opacity:.9;text-align:center;margin-top:6px}
  </style>
</head>
<body>
  <div class="game-wrap">
    <div>
      <h1>Snake — use arrow keys to move</h1>
      <div class="info">
        <div id="score">Score: 0</div>
        <button id="startBtn" class="btn">Start / Pause</button>
        <button id="resetBtn" class="btn">Reset</button>
      </div>
    </div>

    <canvas id="game" width="400" height="400"></canvas>
    <div class="meta">Controls: Arrow keys to move • R to restart • Pause with Start/Pause</div>
  </div>

  <script>
    // Simple Snake game (single file). Save as snake.html and open in a browser (or use Live Server in VS Code).
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const scoreEl = document.getElementById('score');
    const startBtn = document.getElementById('startBtn');
    const resetBtn = document.getElementById('resetBtn');

    const GRID = 20; // size of each cell in pixels
    const COLS = canvas.width / GRID; // should be integer
    const ROWS = canvas.height / GRID;

    let snake, dir, food, running, score, loopId, speed;

    function init(){
      snake = [ {x: Math.floor(COLS/2), y: Math.floor(ROWS/2)} ];
      dir = {x: 1, y: 0};
      spawnFood();
      score = 0;
      running = false;
      speed = 8; // frames per second
      updateScore();
      draw();
    }

    function spawnFood(){
      // spawn food not on snake
      let position;
      do {
        position = { x: Math.floor(Math.random()*COLS), y: Math.floor(Math.random()*ROWS) };
      } while (snake.some(s => s.x === position.x && s.y === position.y));
      food = position;
    }

    function update(){
      const head = { x: snake[0].x + dir.x, y: snake[0].y + dir.y };

      // wrap-around behavior
      if(head.x < 0) head.x = COLS - 1;
      if(head.x >= COLS) head.x = 0;
      if(head.y < 0) head.y = ROWS - 1;
      if(head.y >= ROWS) head.y = 0;

      // collision with self
      if(snake.some((seg, idx) => idx !== 0 && seg.x === head.x && seg.y === head.y)){
        gameOver();
        return;
      }

      snake.unshift(head);

      // ate food?
      if(head.x === food.x && head.y === food.y){
        score += 1;
        updateScore();
        spawnFood();
        // speed up slightly every 5 points
        if(score % 5 === 0) speed = Math.min(20, speed + 1);
      } else {
        snake.pop(); // move forward
      }

      draw();
    }

    function draw(){
      // clear
      ctx.fillStyle = '#071027';
      ctx.fillRect(0,0,canvas.width,canvas.height);

      // draw food
      ctx.fillStyle = '#ef4444';
      drawCell(food.x, food.y);

      // draw snake
      for(let i=0;i<snake.length;i++){
        const s = snake[i];
        ctx.fillStyle = i===0 ? '#34d399' : '#10b981';
        drawCell(s.x, s.y);
      }
    }

    function drawCell(col, row){
      const pad = 1; // small padding between cells
      ctx.fillRect(col*GRID + pad, row*GRID + pad, GRID - pad*2, GRID - pad*2);
    }

    function gameLoop(){
      if(!running) return;
      update();
      loopId = setTimeout(()=> requestAnimationFrame(gameLoop), 1000 / speed);
    }

    function startPause(){
      running = !running;
      startBtn.textContent = running ? 'Pause' : 'Start';
      if(running) gameLoop();
      else { clearTimeout(loopId); }
    }

    function reset(){
      clearTimeout(loopId);
      init();
    }

    function gameOver(){
      running = false;
      startBtn.textContent = 'Start';
      alert('Game over! Score: ' + score);
    }

    function updateScore(){
      scoreEl.textContent = 'Score: ' + score;
    }

    // keyboard controls
    window.addEventListener('keydown', (e)=>{
      const key = e.key;
      if(key === 'ArrowUp' && dir.y !== 1) dir = {x:0,y:-1};
      if(key === 'ArrowDown' && dir.y !== -1) dir = {x:0,y:1};
      if(key === 'ArrowLeft' && dir.x !== 1) dir = {x:-1,y:0};
      if(key === 'ArrowRight' && dir.x !== -1) dir = {x:1,y:0};
      if(key === 'r' || key === 'R') reset();
      if(key === ' '){ startPause(); e.preventDefault(); }
    });

    startBtn.addEventListener('click', startPause);
    resetBtn.addEventListener('click', reset);

    // initialize for first time
    init();
  </script>
</body>
</html>
